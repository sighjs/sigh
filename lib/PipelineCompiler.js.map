{"version":3,"sources":["../src/PipelineCompiler.js"],"names":[],"mappings":"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","file":"PipelineCompiler.js","sourcesContent":["import _ from 'lodash'\nimport { Bacon } from 'sigh-core'\nimport Promise from 'bluebird'\nimport ProcessPool from 'process-pool'\n\nvar DEFAULT_JOBS = 4\n\nexport default class {\n  /**\n   * @param {Object} options Object containing the following fields:\n   *  watch: {Booloean} Whether to pass \"watch\" to plugins (i.e. sigh -w was used).\n   *  environment: {String} Environment being bulit (sigh -e env).\n   *  treeIndex: {Number} treeIndex First tree index, defaulting to 1.\n   */\n  constructor(options) {\n    if (! options)\n      options = {}\n    this.treeIndex = options.treeIndex || 1\n    this.watch = options.watch\n    this.environment = options.environment\n\n    // dependency name against array of input stream\n    this.pipelineInputs = {}\n\n    // compiled stream by pipeline name\n    this.streams = {}\n\n    this.initStream = Bacon.constant([])\n\n    var processLimit = options.jobs || DEFAULT_JOBS\n    // include sigh process as one job so subtract one\n    // TODO: (processLimit > 0) when process-pools supports limit of 0\n    if (processLimit > 1)\n      --processLimit\n\n    this.procPool = new ProcessPool({ processLimit })\n  }\n\n  addPipelineInput(name, stream) {\n    var pipelineInputs = this.pipelineInputs[name]\n    if (pipelineInputs)\n      pipelineInputs.push(stream)\n    else\n      this.pipelineInputs[name] = [ stream ]\n  }\n\n  /**\n   * Clean up all allocated resources.\n   */\n  destroy() {\n    this.procPool.destroy()\n  }\n\n  /**\n   * Turn a pipeline into a stream.\n   * @param {Array} pipeline Array of operations representing pipeline.\n   * @return {Bacon} stream that results from combining all operations in the pipeline.\n   */\n  compile(pipeline, inputStream = null, name = null) {\n    if (name) {\n      var pipelineInputs = this.pipelineInputs[name]\n      if (pipelineInputs) {\n        inputStream = Bacon.mergeAll(\n          inputStream ? [ inputStream, ...pipelineInputs ] : pipelineInputs\n        )\n      }\n    }\n\n    if (! inputStream)\n      inputStream = this.initStream\n\n    var compileOperation = (operation, opData) => {\n      let stream\n      try {\n        stream = operation.plugin ?\n          operation.plugin.apply(this, [ opData ].concat(operation.args)) :\n          operation(opData)\n      }\n      catch (e) {\n        console.log('issue running pipeline', name)\n        console.log(e.stack ? e.stack : e)\n        process.exit(1)\n      }\n\n      return Promise.resolve(stream).then(stream => {\n        if (this.treeIndex === opData.treeIndex)\n          ++this.treeIndex\n        else if (opData.treeIndex > this.treeIndex)\n          this.treeIndex = opData.treeIndex\n\n        if (opData.cleanup) {\n          // TODO: register pipeline cleanup function\n        }\n\n        return stream\n      })\n    }\n\n    if (! (pipeline instanceof Array))\n      pipeline = [ pipeline ]\n\n    var { watch, environment } = this\n    var streamPromise = Promise.reduce(pipeline, (stream, operation) => {\n      var { treeIndex, procPool } = this\n      return compileOperation(operation, {\n        stream,\n        watch,\n        treeIndex,\n        procPool,\n        compiler: this,\n        environment\n      })\n    }, inputStream)\n\n    if (! name)\n      return streamPromise\n\n    return streamPromise.then(stream => {\n      return this.streams[name] = stream\n    })\n  }\n}\n"]}