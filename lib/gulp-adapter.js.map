{"version":3,"sources":["../src/gulp-adapter.js"],"names":[],"mappings":";;;;;;;;qBAAkB,OAAO;;;;wBACI,WAAW;;sBACd,QAAQ;;qBAEnB,UAAA,UAAU;SAAI,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC;CAAA;;AAE3D,SAAS,OAAO,CAAC,UAAU,EAAE,EAAE,EAAW;AACxC,MAAI,IAAI,CAAA;AACR,MAAI,iBAAiB,GAAG,gBAAM,UAAU,CAAC,UAAA,KAAK,EAAI;AAAE,QAAI,GAAG,KAAK,CAAA;GAAE,CAAC,CAAA;;AAEnE,MAAI,WAAW,GAAG,SAAd,WAAW,CAAG,KAAK,EAAI;QACT,MAAM,GAAK,KAAK,CAA1B,QAAQ;;AACd,QAAI,CAAE,MAAM,EACV,OAAO,IAAI,gBAAM,KAAK,CAAC,0DAA0D,CAAC,CAAA;;AAEpF,UAAM,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAA;AACvC,UAAM,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAA;;AAElC,QAAI,CAAC,CAAE,MAAM,CAAE,CAAC,CAAA;GACjB,CAAA;;AAED,MAAI,YAAY,GAAG,sBAAc,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAA;;oCAfpB,IAAI;AAAJ,QAAI;;;AAgBtC,MAAI,aAAa,GAAG,YAAY,CAAC,IAAI,CAAC,UAAU,kBAAI,IAAI,CAAC,CAAC,CAAA;AAC1D,eAAa,CAAC,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;;AAErC,MAAI,gBAAgB,GAAG,KAAK,CAAA;;AAE5B,MAAI,iBAAiB,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;AAClD,QAAI,iBAAiB,GAAG,EAAE,CAAA;AAC1B,UAAM,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,KAAK,EAAI;AAC9B,UAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EACjD,OAAO,IAAI,CAAA;AACb,uBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;AAC7B,aAAO,KAAK,CAAA;KACb,CAAC,CAAA;;AAEF,QAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACvB,YAAM,CAAC,OAAO,CAAC,UAAA,KAAK,EAAI;AACtB,YAAI,KAAK,GAAG,uBAAU;AACpB,kBAAQ,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;AAChC,cAAI,EAAE,KAAK,CAAC,IAAI;SAIjB,CAAC,CAAA;;;;;;AAGF,aAAK,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAA;;;AAGjC,aAAK,CAAC,QAAQ,GAAG,KAAK,CAAA;AACtB,oBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;OACzB,CAAC,CAAA;KACH;;AAED,QAAI,CAAE,gBAAgB,EAAE;;AAEtB,QAAE,CAAC,MAAM,CAAC,KAAK,CAAC,YAAM;;AAEpB,eAAO,CAAC,QAAQ,CAAC,YAAM;AACrB,uBAAa,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;AACjD,cAAI,CAAC,IAAI,gBAAM,GAAG,EAAE,CAAC,CAAA;SACtB,CAAC,CAAA;OACH,CAAC,CAAA;AACF,sBAAgB,GAAG,IAAI,CAAA;KACxB;;AAED,WAAO,iBAAiB,CAAC,MAAM,KAAK,CAAC,GAAG,gBAAM,KAAK,EAAE,GAAG,iBAAiB,CAAA;GAC1E,CAAC,CAAA;;AAEF,SAAO,gBAAM,QAAQ,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAA;CAC5D","file":"gulp-adapter.js","sourcesContent":["import Vinyl from 'vinyl'\nimport { Bacon, Event } from 'sigh-core'\nimport { Transform } from 'stream'\n\nexport default gulpPlugin => adapter.bind(null, gulpPlugin)\n\nfunction adapter(gulpPlugin, op, ...args) {\n  var sink\n  var gulpAdaptedStream = Bacon.fromBinder(_sink => { sink = _sink })\n\n  var onGulpValue = vinyl => {\n    var { __source: source } = vinyl\n    if (! source)\n      return new Bacon.Error('gulp plugin lost source, may not be compatible with sigh')\n\n    source.data = vinyl.contents.toString()\n    source.sourceMap = vinyl.sourceMap\n\n    sink([ source ])\n  }\n\n  var gulpInStream = new Transform({ objectMode: true })\n  var gulpOutStream = gulpInStream.pipe(gulpPlugin(...args))\n  gulpOutStream.on('data', onGulpValue)\n\n  var registeredForEnd = false\n\n  var passThroughStream = op.stream.flatMap(events => {\n    var passThroughEvents = []\n    events = events.filter(event => {\n      if (event.type === 'change' || event.type === 'add')\n        return true\n      passThroughEvents.push(event)\n      return false\n    })\n\n    if (events.length !== 0) {\n      events.forEach(event => {\n        var vinyl = new Vinyl({\n          contents: new Buffer(event.data),\n          path: event.path,\n          // the following messes with source maps...\n          // path: event.projectPath,\n          // base: event.basePath,\n        })\n\n        // the next cannot be attached via the constructor\n        vinyl.sourceMap = event.sourceMap\n\n        // something to help...\n        vinyl.__source = event\n        gulpInStream.push(vinyl)\n      })\n    }\n\n    if (! registeredForEnd) {\n      // delay until the first value to avoid starting stream during compilation stage\n      op.stream.onEnd(() => {\n        // without the nextTick then the last event can go missing on node 0.10\n        process.nextTick(() => {\n          gulpOutStream.removeListener('data', onGulpValue)\n          sink(new Bacon.End())\n        })\n      })\n      registeredForEnd = true\n    }\n\n    return passThroughEvents.length === 0 ? Bacon.never() : passThroughEvents\n  })\n\n  return Bacon.mergeAll(gulpAdaptedStream, passThroughStream)\n}\n"]}