{"version":3,"sources":["../../src/test/gulp-adapter.spec.js"],"names":[],"mappings":";;;;wBAAoB,UAAU;;;;wBACD,WAAW;;0BACjB,aAAa;;;;yBACF,YAAY;;oCACnB,yBAAyB;;2BAE5B,iBAAiB;;;;AAEzC,QAAQ,CAAC,cAAc,EAAE,YAAM;AAC7B,IAAE,CAAC,+BAA+B,EAAE,YAAM;AACxC,QAAI,OAAO,GAAG,sDAAuB,CAAA;;AAErC,QAAI,IAAI,GAAG,qDAAqD,CAAA;AAChE,QAAI,MAAM,GAAG,gBAAM,QAAQ,CAAC,CAAE,oBAAU,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAE,CAAC,CAAA;;AAEnF,QAAI,EAAE,GAAG,OAAO,CAAC,EAAE,MAAM,EAAN,MAAM,EAAE,CAAC,CAAA;AAC5B,QAAI,MAAM,GAAG,CAAC,CAAA;;AAEd,MAAE,CAAC,OAAO,CAAC,UAAA,MAAM,EAAI;AACnB,QAAE,MAAM,CAAA;AACR,YAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAC7B,UAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;AACrB,UAAI,aAAa,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAA;;AAEnD,mBAAa,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;;;AAGvC,UAAI,QAAQ,GAAG,iCAAsB,KAAK,CAAC,SAAS,CAAC,CAAA;AACrD,UAAI,OAAO,GAAG,sCAAW,IAAI,EAAE,KAAK,CAAC,CAAA;AACrC,aAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAA;AAC1C,UAAI,cAAc,GAAG,sCAAW,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;AAClD,oBAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAA;AAClD,UAAI,SAAS,GAAG,QAAQ,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAA;;AAE5D,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;AAClD,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;AACzC,aAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;KAC9C,CAAC,CAAA;;AAEF,WAAO,0BAAY,UAAA,OAAO,EAAI;AAC5B,QAAE,CAAC,KAAK,CAAC,YAAM;AACb,cAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AACtB,eAAO,EAAE,CAAA;OACV,CAAC,CAAA;KACH,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"gulp-adapter.spec.js","sourcesContent":["import Promise from 'bluebird'\nimport { Bacon, Event } from 'sigh-core'\nimport gulpUglify from 'gulp-uglify'\nimport { SourceMapConsumer } from 'source-map'\nimport { positionOf } from 'sigh-core/lib/sourceMap'\n\nimport gulpAdapter from '../gulp-adapter'\n\ndescribe('gulp adapter', () => {\n  it('adapts the gulp-uglify plugin', () => {\n    var adapted = gulpAdapter(gulpUglify)\n\n    var data = '  function hey() {\\n  return    14 }\\n\\n  var a = 1'\n    var stream = Bacon.constant([ new Event({ path: 'file1.js', type: 'add', data }) ])\n\n    var op = adapted({ stream })\n    var nCalls = 0\n\n    op.onValue(events => {\n      ++nCalls\n      events.length.should.equal(1)\n      var event = events[0]\n      var sizeReduction = data.length - event.data.length\n      // verify data is smaller (minified)\n      sizeReduction.should.be.greaterThan(10)\n\n      // verify the source map\n      var consumer = new SourceMapConsumer(event.sourceMap)\n      var origPos = positionOf(data, 'var')\n      origPos.should.eql({ line: 4, column: 2 })\n      var transformedPos = positionOf(event.data, 'var')\n      transformedPos.should.eql({ line: 1, column: 25 })\n      var mappedPos = consumer.originalPositionFor(transformedPos)\n\n      origPos.line.should.not.equal(transformedPos.line)\n      origPos.line.should.equal(mappedPos.line)\n      origPos.column.should.equal(mappedPos.column)\n    })\n\n    return new Promise(resolve => {\n      op.onEnd(() => {\n        nCalls.should.equal(1)\n        resolve()\n      })\n    })\n  })\n})\n"]}