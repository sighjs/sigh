{"version":3,"sources":["../../src/test/PipelineCompiler.spec.js"],"names":[],"mappings":";;;;wBAAsB,WAAW;;wBACb,UAAU;;;;gCACD,qBAAqB;;;;4BAE3B,iBAAiB;;AAExC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAA;;AAErC,QAAQ,CAAC,kBAAkB,EAAE,YAAM;AACjC,IAAE,CAAC,6CAA6C,EAAE,YAAM;AACtD,QAAI,QAAQ,GAAG,mCAAoB,CAAA;AACnC,WAAO,QAAQ,CAAC,OAAO,CAAC,CACtB,UAAA,EAAE,EAAI;;AAEJ,aAAO,gBAAM,QAAQ,CAAC,CAAC,CAAC,CAAA;KACzB,EACD,UAAA,EAAE;aAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC;eAAI,CAAC,GAAG,CAAC;OAAA,CAAC;KAAA,CAChC,CAAC,CACD,IAAI,CAAC,UAAA,MAAM;aAAI,MAAM,CAAC,SAAS,uBAAS,CAAC,IAAI,CAAC,UAAA,KAAK;eAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;OAAA,CAAC;KAAA,CAAC,CAAA;GAChF,CAAC,CAAA;;AAEF,IAAE,CAAC,wDAAwD,EAAE,YAAM;AACjE,QAAI,QAAQ,GAAG,kCAAqB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAA;AACpD,WAAO,QAAQ,CAAC,OAAO,CAAC,UAAA,EAAE,EAAI;AAC5B,QAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,QAAK,CAAA;;AAEvB,aAAO,gBAAM,QAAQ,CAAC,GAAG,CAAC,CAAA;KAC3B,CAAC,CACD,IAAI,CACH,UAAA,MAAM;aAAI,MAAM,CAAC,SAAS,uBAAS,CAAC,IAAI,CAAC,UAAA,KAAK;eAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;OAAA,CAAC;KAAA,CAC3E,CAAA;GACF,CAAC,CAAA;;AAEF,IAAE,CAAC,iCAAiC,EAAE,YAAM;AAC1C,QAAI,QAAQ,GAAG,mCAAoB,CAAA;AACnC,WAAO,QAAQ,CAAC,OAAO,CAAC,0BAAO,UAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAK;AAC/C,YAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAA;;AAE1B,aAAO,gBAAM,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;KACrC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CACT,IAAI,CAAC,UAAA,MAAM;aAAI,MAAM,CAAC,SAAS,uBAAS,CAAC,IAAI,CAAC,UAAA,KAAK;eAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;OAAA,CAAC;KAAA,CAAC,CAAA;GACjF,CAAC,CAAA;;AAEF,IAAE,CAAC,iDAAiD,EAAE,YAAM;AAC1D,QAAI,QAAQ,GAAG,mCAAoB,CAAA;AACnC,WAAO,QAAQ,CAAC,OAAO,CAAC,CACtB,UAAA,EAAE,EAAI;AAAE,QAAE,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;KAAE,EACtC,UAAA,EAAE,EAAI;AAAE,QAAE,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,GAAG,CAAC,CAAA;KAAE,EACxD,UAAA,EAAE,EAAI;AAAE,QAAE,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;KAAE,CACvC,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"PipelineCompiler.spec.js","sourcesContent":["import { Bacon } from 'sigh-core'\nimport Promise from 'bluebird'\nimport PipelineCompiler from '../PipelineCompiler'\n\nimport { plugin } from './plugin/helper'\n\nvar should = require('chai').should()\n\ndescribe('PipelineCompiler', () => {\n  it('should create appropriate stream from array', () => {\n    var compiler = new PipelineCompiler\n    return compiler.compile([\n      op => {\n        // TODO: test op.stream is Bacon.constant([])\n        return Bacon.constant(1)\n      },\n      op => op.stream.map(v => v + 1)\n    ])\n    .then(stream => stream.toPromise(Promise).then(value => value.should.equal(2)))\n  })\n\n  it('should create stream from stream, passing watch option', () => {\n    var compiler = new PipelineCompiler({ watch: true })\n    return compiler.compile(op => {\n      op.watch.should.be.true\n      // TODO: test op.stream is Bacon.constant([])\n      return Bacon.constant(420)\n    })\n    .then(\n      stream => stream.toPromise(Promise).then(value => value.should.equal(420))\n    )\n  })\n\n  it('should pass arguments to plugin', () => {\n    var compiler = new PipelineCompiler\n    return compiler.compile(plugin((op, arg1, arg2) => {\n        should.not.exist(op.watch)\n        // TODO: test op.stream is Bacon.constant([])\n        return Bacon.constant(arg1 + arg2)\n    }, 7, 11))\n    .then(stream => stream.toPromise(Promise).then(value => value.should.equal(18)))\n  })\n\n  it('should pass treeIndex and observe nextTreeIndex', () => {\n    var compiler = new PipelineCompiler\n    return compiler.compile([\n      op => { op.treeIndex.should.equal(1) },\n      op => { op.treeIndex.should.equal(2), op.treeIndex = 4 },\n      op => { op.treeIndex.should.equal(4) }\n    ])\n  })\n})\n"]}