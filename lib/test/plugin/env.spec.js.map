{"version":3,"sources":["../../../src/test/plugin/env.spec.js"],"names":[],"mappings":";;;;wBAA6B,WAAW;;wBACpB,UAAU;;;;yBAEd,kBAAkB;;;;gCACL,wBAAwB;;;;sBAC9B,UAAU;;AAEjC,QAAQ,CAAC,YAAY,EAAE,YAAM;AAC3B,IAAE,CAAC,qDAAqD,EAAE,YAAM;AAC9D,QAAI,QAAQ,GAAG,kCAAqB,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAA;AAC9D,QAAI,OAAO,GAAG,CACZ,UAAA,EAAE;aAAI,gBAAM,QAAQ,CAAC,CAAC,CAAC;KAAA,EACvB,4CAAY,UAAA,EAAE;aAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,GAAG;eAAI,GAAG,GAAG,CAAC;OAAA,CAAC;KAAA,EAAE,QAAQ,CAAC,CAC3D,CAAA;;AAED,WAAO,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CACnC,UAAA,MAAM;aAAI,MAAM,CAAC,SAAS,uBAAS,CAAC,IAAI,CAAC,UAAA,CAAC,EAAI;AAAE,SAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;OAAE,CAAC;KAAA,CACtE,CAAA;GACF,CAAC,CAAA;;AAEF,IAAE,CAAC,iEAAiE,EAAE,YAAM;AAC1E,QAAI,QAAQ,GAAG,kCAAqB,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAA;AAC1D,QAAI,OAAO,GAAG,CACZ,UAAA,EAAE;aAAI,gBAAM,QAAQ,CAAC,CAAC,CAAC;KAAA,EACvB,4CAAY,UAAA,EAAE;aAAI,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,GAAG;eAAI,GAAG,GAAG,CAAC;OAAA,CAAC;KAAA,EAAE,IAAI,EAAE,IAAI,CAAC,CAC7D,CAAA;;AAED,WAAO,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CACnC,UAAA,MAAM;aAAI,MAAM,CAAC,SAAS,uBAAS,CAAC,IAAI,CAAC,UAAA,CAAC,EAAI;AAAE,SAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;OAAE,CAAC;KAAA,CACrE,CAAA;GACF,CAAC,CAAA;CACH,CAAC,CAAA","file":"env.spec.js","sourcesContent":["import { Bacon, Event } from 'sigh-core'\nimport Promise from 'bluebird'\n\nimport env from '../../plugin/env'\nimport PipelineCompiler from '../../PipelineCompiler'\nimport { plugin } from './helper'\n\ndescribe('env plugin', () => {\n  it('modifies stream when selected environment is chosen', () => {\n    var compiler = new PipelineCompiler({ environment: 'friend' })\n    var streams = [\n      op => Bacon.constant(8),\n      plugin(env, op => op.stream.map(val => val * 2), 'friend')\n    ]\n\n    return compiler.compile(streams).then(\n      stream => stream.toPromise(Promise).then(v => { v.should.equal(16) })\n    )\n  })\n\n  it('passes stream through when selected environments are not chosen', () => {\n    var compiler = new PipelineCompiler({ environment: 'e1' })\n    var streams = [\n      op => Bacon.constant(9),\n      plugin(env, op => op.stream.map(val => val * 2), 'e2', 'e3')\n    ]\n\n    return compiler.compile(streams).then(\n      stream => stream.toPromise(Promise).then(v => { v.should.equal(9) })\n    )\n  })\n})\n"]}