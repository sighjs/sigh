{"version":3,"sources":["../../../src/test/plugin/filter.spec.js"],"names":[],"mappings":";;;;wBAA6B,WAAW;;wBACpB,UAAU;;;;4BAEX,qBAAqB;;;;gCACX,wBAAwB;;;;sBAC9B,UAAU;;AAEjC,QAAQ,CAAC,eAAe,EAAE,YAAM;AAC9B,IAAE,CAAC,wDAAwD,EAAE,YAAM;AACjE,QAAI,MAAM,GAAG,CACX,oBAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAC7D,oBAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAC9D,CAAA;AACD,QAAI,MAAM,GAAG,gBAAM,QAAQ,CAAC,MAAM,CAAC,CAAA;;AAEnC,WAAO,+BAAO,IAAI,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,SAAS,uBAAS,CACxE,IAAI,CAAC,UAAA,MAAM,EAAI;AACd,YAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAC7B,YAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;KAC9C,CAAC,CAAA;GACH,CAAC,CAAA;;AAEF,IAAE,CAAC,kDAAkD,EAAE,YAAM;AAC3D,QAAI,MAAM,GAAG,CACX,oBAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAC7D,oBAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CACjE,CAAA;AACD,QAAI,MAAM,GAAG,gBAAM,QAAQ,CAAC,MAAM,CAAC,CAAA;;AAEnC,WAAO,+BAAO,IAAI,EAAE,EAAE,MAAM,EAAN,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,uBAAS,CAClE,IAAI,CAAC,UAAA,MAAM,EAAI;AACd,YAAM,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAC7B,YAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;KAC9C,CAAC,CAAA;GACH,CAAC,CAAA;CACH,CAAC,CAAA","file":"filter.spec.js","sourcesContent":["import { Bacon, Event } from 'sigh-core'\nimport Promise from 'bluebird'\n\nimport filter from '../../plugin/filter'\nimport PipelineCompiler from '../../PipelineCompiler'\nimport { plugin } from './helper'\n\ndescribe('filter plugin', () => {\n  it('filters events according to a projectPath regex filter', () => {\n    var events = [\n      new Event({ type: 'add', path: 'blah.js', data: 'var blah' }),\n      new Event({ type: 'add', path: 'plah.js', data: 'var plah' }),\n    ]\n    var stream = Bacon.constant(events)\n\n    return filter(true, { stream }, { projectPath: /^b/ }).toPromise(Promise)\n    .then(events => {\n      events.length.should.equal(1)\n      events[0].projectPath.should.equal('blah.js')\n    })\n  })\n\n  it('filters events according to a type string filter', () => {\n    var events = [\n      new Event({ type: 'add', path: 'blah.js', data: 'var blah' }),\n      new Event({ type: 'update', path: 'plah.js', data: 'var plah' }),\n    ]\n    var stream = Bacon.constant(events)\n\n    return filter(true, { stream }, { type: 'add' }).toPromise(Promise)\n    .then(events => {\n      events.length.should.equal(1)\n      events[0].projectPath.should.equal('blah.js')\n    })\n  })\n})\n"]}