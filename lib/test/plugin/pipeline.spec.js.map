{"version":3,"sources":["../../../src/test/plugin/pipeline.spec.js"],"names":[],"mappings":"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","file":"pipeline.spec.js","sourcesContent":["import _ from 'lodash'\nimport Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\n\nimport PipelineCompiler from '../../PipelineCompiler'\nimport pipeline from '../../plugin/pipeline'\n\ndescribe('pipeline plugin', () => {\n  var compiler, stream\n  beforeEach(() => {\n    compiler = new PipelineCompiler\n    stream = compiler.initStream\n  })\n\n  it('intercepts the end of two pipelines', () => {\n    return Promise.all([1, 2].map(\n      idx => compiler.compile(op => Bacon.constant(idx), null, `stream${idx}`)\n    ))\n    .then(streams => {\n      return new Promise(function(resolve, reject) {\n        var nValues = 0\n        pipeline({ stream, compiler }, 'stream1', 'stream2').onValue(events => {\n          ++nValues\n          events.should.eql(nValues)\n\n          if (nValues === 2) {\n            resolve()\n            return Bacon.noMore\n          }\n        })\n      })\n    })\n  })\n\n  it('can subscribe to the same stream as another pipeline', () => {\n    return Promise.all([1, 2].map(\n      idx => compiler.compile(op => Bacon.constant(idx), null, `stream${idx}`)\n    ))\n    .then(streams => {\n      // this stops the pipelines from spitting out all the events into the first\n      // subscriber, emulating how a true pipeline would work using async glob etc.\n      compiler.streams = _.mapValues(compiler.streams, stream => stream.delay(0))\n\n      return Promise.all([\n        new Promise(function(resolve, reject) {\n          var nValues = 0\n          pipeline({ stream, compiler }, 'stream1', 'stream2').onValue(events => {\n            ++nValues\n            events.should.equal(nValues)\n            if (nValues === 2) {\n              resolve()\n              return Bacon.noMore\n            }\n          })\n        }),\n        new Promise(function(resolve, reject) {\n          pipeline({ stream, compiler }, 'stream2').onValue(events => {\n            events.should.equal(2)\n            resolve()\n            return Bacon.noMore\n          })\n        }),\n      ])\n    })\n  })\n\n  it('can subscribe to a pipeline before it has been compiled', () => {\n    var pipelineOp = pipeline({ stream, compiler }, 'stream')\n\n    compiler.compile(op => Bacon.constant(1), null, 'stream')\n    .then(stream => {\n      compiler.streams.stream = compiler.streams.stream.delay(0)\n      return pipelineOp.toPromise(Promise)\n    })\n    .then(function(values) {\n      values.should.eql(1)\n    })\n  })\n})\n"]}