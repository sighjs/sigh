{"version":3,"sources":["../../src/plugin/write.js"],"names":[],"mappings":"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","file":"write.js","sourcesContent":["import path from 'path'\nimport Promise from 'bluebird'\nimport fs from 'fs'\nimport { log } from 'sigh-core'\n\nimport fse from 'fs-extra'\n\nvar glob = Promise.promisify(require('glob'))\n\nvar writeFile = Promise.promisify(fs.writeFile)\nvar unlink = Promise.promisify(fs.unlink)\nvar rm = Promise.promisify(fse.remove) // TODO: not used yet, see later comment\nvar ensureDir = Promise.promisify(fse.ensureDir)\n\nimport { mapEvents } from 'sigh-core/lib/stream'\n\nexport function writeEvent(basePath, event) {\n  var { fileType } = event\n  var projectFile = path.basename(event.path)\n  var { projectPath } = event\n\n  // the projectPath remains the same but the basePath is changed to point to\n  // the output directory\n  event.basePath = basePath\n\n  var outputPath = event.path\n  if (event.type === 'remove') {\n    return unlink(outputPath).then(() => {\n      return event.supportsSourceMap ? unlink(outputPath + '.map').then(() => event) : event\n    })\n  }\n\n  var { data } = event\n  var outputDir = path.dirname(outputPath)\n\n  var promise = ensureDir(path.dirname(outputPath)).then(() => {\n    return writeFile(outputPath, data, {encoding: event.encoding})\n  })\n\n  if (event.supportsSourceMap) {\n    var sourceMap\n    try {\n      sourceMap = event.sourceMap\n    }\n    catch (e) {\n      log.warn('\\x07could not construct identity source map for %s', projectPath)\n      if (e.message)\n        log.warn(e.message)\n    }\n\n    if (sourceMap) {\n      var mapPath = projectFile + '.map'\n      var suffix\n      if (fileType === 'js')\n        suffix = '//# sourceMappingURL=' + mapPath\n      else if (fileType === 'css')\n        suffix = '/*# sourceMappingURL=' + mapPath + ' */'\n\n      if (suffix)\n        data += '\\n' + suffix\n\n      promise = promise.then(() => {\n        if (sourceMap.source) {\n          sourceMap.sources = sourceMap.sources.map(source => path.relative(outputDir, source)) \n          return writeFile(path.join(outputDir, mapPath), JSON.stringify(sourceMap))\n        }\n      })\n    }\n  }\n\n  return promise.then(() => event)\n}\n\n// basePath = base directory in which to write output files\nexport default function(op, options, basePath) {\n  if (! basePath) {\n    basePath = options\n    options = {}\n  }\n\n  var clobberPromise\n  var { clobber } = options\n  if (clobber) {\n    // sanitize a path we are about to recursively remove... it must be below\n    // the current working directory (which contains sigh.js)\n    if (! basePath || basePath[0] === '/' || basePath.substr(0, 3) === '../')\n      throw Error(`refusing to clobber '${basePath}' outside of project`)\n\n    if (clobber === true) {\n      clobberPromise = rm(basePath)\n    }\n    else {\n      if (! (clobber instanceof Array))\n        clobber = [ clobber ]\n\n      clobberPromise = Promise.map(clobber, pattern => {\n        return glob(pattern, { cwd: basePath }).then(\n          matches => Promise.map(matches, match => rm(path.join(basePath, match)))\n        )\n      })\n    }\n  }\n\n  var streamPromise = mapEvents(op.stream, writeEvent.bind(this, basePath))\n  return clobberPromise ? clobberPromise.thenReturn(streamPromise) : streamPromise\n}\n"]}