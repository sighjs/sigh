{"version":3,"sources":["../../src/plugin/merge.js"],"names":[],"mappings":";;;;;;;;;;wBAAoB,UAAU;;;;wBACR,WAAW;;sBACnB,QAAQ;;;;iCAEY,sBAAsB;;qBAEzC,UAAS,EAAE,EAAgB;oCAAX,SAAS;AAAT,aAAS;;;AACtC,MAAI,cAAc,GAAG,KAAK,CAAA;AAC1B,MAAI,SAAS,CAAC,MAAM,IAAI,CAAE,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;AAC7C,QAAM,IAAI,GAAG,SAAS,CAAC,KAAK,EAAE,CAAA;AAC9B,kBAAc,GAAG,IAAI,CAAC,cAAc,CAAA;GACrC;;;;AAID,MAAM,aAAa,GAAG,sBAAQ,MAAM,CAClC,SAAS,EACT,UAAC,OAAO,EAAE,QAAQ,EAAK;AACrB,WAAO,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,MAAM,IAAI,IAAI,CAAC,CACtD,IAAI,CAAC,UAAA,MAAM,EAAI;AACd,aAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACpB,aAAO,OAAO,CAAA;KACf,CAAC,CAAA;GACH,EACD,EAAE,CACH,CACA,IAAI,CAAC,UAAA,OAAO;WAAI,gBAAM,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM;aAAI,MAAM,KAAK,EAAE,CAAC,QAAQ,CAAC,UAAU;KAAA,CAAC,CAAC;GAAA,CAAC,CAAA;;AAE7F,MAAI,cAAc,EAAE;AAClB,WAAO,aAAa,CAAC,IAAI,CAAC,UAAA,MAAM,EAAI;AAClC,UAAI,UAAU,GAAG,EAAE,CAAA;UACL,iBAAiB,GAAK,SAAS,CAAvC,MAAM;;AAEZ,aAAO,MAAM,CAAC,aAAa,CAAC,UAAA,MAAM,EAAI;AACpC,YAAI,iBAAiB,EAAE;AACrB,cAAI,MAAM,CAAC,KAAK,CAAC,UAAA,KAAK;mBAAI,KAAK,CAAC,SAAS;WAAA,CAAC,EAAE;AAC1C,sBAAU,CAAC,IAAI,MAAA,CAAf,UAAU,qBAAS,MAAM,EAAC,CAAA;;AAE1B,mBAAO,EAAE,iBAAiB,GACxB,gBAAM,QAAQ,CAAC,CAAE,gBAAM,QAAQ,CAAC,UAAU,CAAC,EAAE,MAAM,CAAE,CAAC,GAAG,gBAAM,KAAK,EAAE,CAAA;WACzE;SACF,MACI;AACH,iBAAO,MAAM,CAAA;SACd;OACF,CAAC,CAAA;KACH,CAAC,CAAA;GACH;;AAED,SAAO,aAAa,CAAA;CACrB","file":"merge.js","sourcesContent":["import Promise from 'bluebird'\nimport { Bacon } from 'sigh-core'\nimport _ from 'lodash'\n\nimport { bufferingDebounce } from 'sigh-core/lib/stream'\n\nexport default function(op, ...pipelines) {\n  let collectInitial = false\n  if (pipelines.length && ! pipelines[0].plugin) {\n    const opts = pipelines.shift()\n    collectInitial = opts.collectInitial\n  }\n\n  // Promise.map(..., { concurrency: 1 }) delivers the items to the iterator\n  // out of order which messes with opTreeIndex ordering.\n  const streamPromise = Promise.reduce(\n    pipelines,\n    (streams, pipeline) => {\n      return op.compiler.compile(pipeline, op.stream || null)\n      .then(stream => {\n        streams.push(stream)\n        return streams\n      })\n    },\n    []\n  )\n  .then(streams => Bacon.mergeAll(streams.filter(stream => stream !== op.compiler.initStream)))\n\n  if (collectInitial) {\n    return streamPromise.then(stream => {\n      let initEvents = []\n      let { length: nStreamEventsLeft } = pipelines\n\n      return stream.flatMapLatest(events => {\n        if (nStreamEventsLeft) {\n          if (events.every(event => event.initPhase)) {\n            initEvents.push(...events)\n\n            return --nStreamEventsLeft ?\n              Bacon.mergeAll([ Bacon.constant(initEvents), stream ]) : Bacon.never()\n          }\n        }\n        else {\n          return events\n        }\n      })\n    })\n  }\n\n  return streamPromise\n}\n"]}