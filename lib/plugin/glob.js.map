{"version":3,"sources":["../../src/plugin/glob.js"],"names":[],"mappings":"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","file":"glob.js","sourcesContent":["import chokidar from 'chokidar'\nimport _ from 'lodash'\nimport { Bacon, Event } from 'sigh-core'\nimport Promise from 'bluebird'\nvar glob = Promise.promisify(require('glob'))\n\nimport { bufferingDebounce, coalesceEvents } from 'sigh-core/lib/stream'\n\n// necessary to detect chokidar's duplicate/invalid events, see later comment\nvar DEFAULT_DEBOUNCE = 120\n\nexport default function(op, ...patterns) {\n  // the first argument could be an option object rather than a pattern\n  var opts = typeof patterns[0] === 'object' ? patterns.shift() : {}\n\n  var { treeIndex = 1, debounce = DEFAULT_DEBOUNCE } = op\n  op.nextTreeIndex = treeIndex + patterns.length\n\n  var newEvent = (type, { path, treeIndex, initPhase = false }) => {\n    var props = { type, path, initPhase, opTreeIndex: treeIndex, encoding: opts.encoding }\n    if (opts.basePath)\n      props.basePath = opts.basePath\n    props.createTime = new Date\n    return new Event(props)\n  }\n\n  if (opts.basePath)\n    patterns = patterns.map(pattern => opts.basePath + '/' + pattern)\n\n  var globOptions = _.omit(opts, 'basePath')\n\n  var makeGlobStream = events => {\n    var stream = Bacon.combineAsArray(\n      patterns.map(\n        (pattern, idx) => Bacon.fromPromise(\n          glob(pattern, globOptions).then(\n            paths => paths.map(path => ({ path, treeIndex: treeIndex + idx }))\n          )\n        )\n      )\n    )\n    .map(_.flatten)\n    .map(files => {\n      return events.concat(files.map(file => {\n        file.initPhase = true\n        return newEvent('add', file)\n      }))\n    })\n    .take(1)\n\n    if (! op.watch)\n      return stream\n\n    var watchers = patterns.map(\n      pattern => chokidar.watch(pattern, { ignoreInitial: true })\n    )\n\n    var chokEvRemap = { unlink: 'remove' }\n    var updates = Bacon.mergeAll(\n      _.flatten(['add', 'change', 'unlink'].map(type => watchers.map(\n        (watcher, idx) => Bacon.fromEvent(watcher, type).map(\n          path => {\n            // TODO: remove\n            // console.log('watch', Date.now(), type, path)\n            return [ newEvent(chokEvRemap[type] || type, { path, treeIndex: treeIndex + idx }) ]\n          }\n        )\n      )))\n    )\n\n    // see https://github.com/paulmillr/chokidar/issues/262\n    // the debounce alone makes chokidar behave but eventually coalesceEvents will\n    // act as a second defense to this issue.\n    return stream.changes().concat(\n      coalesceEvents( bufferingDebounce(updates, debounce).map(_.flatten) )\n    )\n  }\n\n  var globStream\n  return op.stream.flatMap(events => {\n    if (! globStream) {\n      globStream = makeGlobStream(events)\n      return globStream\n    }\n    else {\n      return events\n    }\n  })\n}\n"]}